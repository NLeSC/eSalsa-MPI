# 1 "reduce_ops.c"
# 1 "<command-line>"
# 1 "reduce_ops.c"
# 1 "../shared/logging.h" 1
# 64 "../shared/logging.h"
void init_logging();


void XERROR(int indent, int fatal, const char *header, const char *func, const char *file, const int line, const char *fmt, ...);
void XLOG(int indent, int verbose, const char *header, const char *func, const char *file, const int line, const char *fmt, ...);
void XSTACKTRACE(int indent, const char *header, const char *func, const char *file, const int line, const char *fmt, ...);
# 2 "reduce_ops.c" 2
# 1 "reduce_ops.h" 1



# 1 "empi.h" 1
# 10 "empi.h"
typedef int EMPI_Comm;

typedef int EMPI_Group;
typedef int EMPI_Info;
typedef int EMPI_Request;
typedef int EMPI_Op;
typedef int EMPI_Aint;
typedef int EMPI_Win;
typedef int EMPI_File;
typedef int EMPI_Offset;

typedef int EMPI_Comm_errhandler_fn;
typedef int EMPI_Comm_copy_attr_function;
typedef int EMPI_Comm_delete_attr_function;
typedef int EMPI_Errhandler;


typedef int EMPI_Handler_function;
typedef int EMPI_File_errhandler_fn;
typedef int EMPI_Request;
typedef int EMPI_Grequest_query_function;
typedef int EMPI_Grequest_free_function;
typedef int EMPI_Grequest_cancel_function;
typedef int EMPI_Copy_function;
typedef int EMPI_Delete_function;
typedef int EMPI_Datarep_conversion_function;
typedef int EMPI_Datarep_extent_function;
typedef int EMPI_Type_copy_attr_function;
typedef int EMPI_Type_delete_attr_function;
typedef int EMPI_Win_errhandler_fn;
typedef int EMPI_Win_copy_attr_function;
typedef int EMPI_Win_delete_attr_function;

typedef int EMPI_Fint;

typedef int EMPI_Datatype;

typedef struct s_status {
  int MPI_SOURCE;
  int MPI_TAG;
  int MPI_ERROR;
  int count;
  int cancelled;
  EMPI_Datatype type;
} EMPI_Status;

typedef void (EMPI_User_function)( void *invec, void *inoutvec, int *len, EMPI_Datatype *datatype);
# 258 "empi.h"
int EMPI_Init ( int *argc, char ***argv );
int EMPI_Initialized ( int *flag );
int EMPI_Abort ( EMPI_Comm comm, int errorcode );
int EMPI_Finalized ( int *flag );
int EMPI_Finalize ( void );
double EMPI_Wtime(void);

int EMPI_Get_processor_name ( char *name, int *resultlen );
int EMPI_Error_string ( int errorcode, char *string, int *resultlen );



int EMPI_Comm_create ( EMPI_Comm comm, EMPI_Group g, EMPI_Comm *newcomm );
int EMPI_Comm_dup ( EMPI_Comm comm, EMPI_Comm *newcomm );
int EMPI_Comm_free ( EMPI_Comm *comm );
int EMPI_Comm_group ( EMPI_Comm comm, EMPI_Group *g );
int EMPI_Comm_rank ( EMPI_Comm comm, int *rank );
int EMPI_Comm_size ( EMPI_Comm comm, int *size );
int EMPI_Comm_split ( EMPI_Comm comm, int color, int key, EMPI_Comm *newcomm );
int EMPI_Group_range_incl ( EMPI_Group g, int n, int ranges[][3], EMPI_Group *newgroup );
int EMPI_Group_incl ( EMPI_Group g, int n, int *ranks, EMPI_Group *newgroup );
int EMPI_Group_range_excl ( EMPI_Group g, int n, int ranges[][3], EMPI_Group *newgroup );
int EMPI_Group_translate_ranks ( EMPI_Group group1, int n, int *ranks1, EMPI_Group group2, int *ranks2 );
int EMPI_Group_union ( EMPI_Group group1, EMPI_Group group2, EMPI_Group *newgroup );




int EMPI_Allgather ( void *sendbuf, int sendcount, EMPI_Datatype sendtype, void *recvbuf, int recvcount, EMPI_Datatype recvtype, EMPI_Comm comm );
int EMPI_Allgatherv ( void *sendbuf, int sendcount, EMPI_Datatype sendtype, void *recvbuf, int *recvcounts, int *displs, EMPI_Datatype recvtype, EMPI_Comm comm );
int EMPI_Allreduce ( void *sendbuf, void *recvbuf, int count, EMPI_Datatype type, EMPI_Op op, EMPI_Comm comm );
int EMPI_Alltoall ( void *sendbuf, int sendcount, EMPI_Datatype sendtype, void *recvbuf, int recvcount, EMPI_Datatype recvtype, EMPI_Comm comm );
int EMPI_Alltoallv ( void *sendbuf, int *sendcnts, int *sdispls, EMPI_Datatype sendtype, void *recvbuf, int *recvcnts, int *rdispls, EMPI_Datatype recvtype, EMPI_Comm comm );
int EMPI_Alltoallw ( void *sendbuf, int *sendcnts, int *sdispls, EMPI_Datatype *sendtypes, void *recvbuf, int *recvcnts, int *rdispls, EMPI_Datatype *recvtypes, EMPI_Comm comm );
int EMPI_Scatter ( void *sendbuf, int sendcnt, EMPI_Datatype sendtype, void *recvbuf, int recvcnt, EMPI_Datatype recvtype, int root, EMPI_Comm comm );
int EMPI_Scatterv ( void *sendbuf, int *sendcnts, int *displs, EMPI_Datatype sendtype, void *recvbuf, int recvcnt, EMPI_Datatype recvtype, int root, EMPI_Comm comm );
int EMPI_Barrier ( EMPI_Comm comm );
int EMPI_Bcast ( void *buffer, int count, EMPI_Datatype type, int root, EMPI_Comm comm );
int EMPI_Gather ( void *sendbuf, int sendcnt, EMPI_Datatype sendtype, void *recvbuf, int recvcnt, EMPI_Datatype recvtype, int root, EMPI_Comm comm );
int EMPI_Gatherv ( void *sendbuf, int sendcnt, EMPI_Datatype sendtype, void *recvbuf, int *recvcnts, int *displs, EMPI_Datatype recvtype, int root, EMPI_Comm comm );
int EMPI_Reduce ( void *sendbuf, void *recvbuf, int count, EMPI_Datatype type, EMPI_Op op, int root, EMPI_Comm comm );



int EMPI_Ibsend ( void *buf, int count, EMPI_Datatype type, int dest, int tag, EMPI_Comm comm, EMPI_Request *r );
int EMPI_Irecv ( void *buf, int count, EMPI_Datatype type, int source, int tag, EMPI_Comm comm, EMPI_Request *r );
int EMPI_Irsend ( void *buf, int count, EMPI_Datatype type, int dest, int tag, EMPI_Comm comm, EMPI_Request *r );
int EMPI_Isend ( void *buf, int count, EMPI_Datatype type, int dest, int tag, EMPI_Comm comm, EMPI_Request *r );
int EMPI_Rsend ( void *buf, int count, EMPI_Datatype type, int dest, int tag, EMPI_Comm comm );
int EMPI_Send ( void *buf, int count, EMPI_Datatype type, int dest, int tag, EMPI_Comm comm );
int EMPI_Sendrecv ( void *sendbuf, int sendcount, EMPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, EMPI_Datatype recvtype, int source, int recvtag, EMPI_Comm comm, EMPI_Status *stat );
int EMPI_Ssend ( void *buf, int count, EMPI_Datatype type, int dest, int tag, EMPI_Comm comm );
int EMPI_Recv ( void *buf, int count, EMPI_Datatype type, int source, int tag, EMPI_Comm comm, EMPI_Status *stat );



int EMPI_Wait ( EMPI_Request *r, EMPI_Status *stat );
int EMPI_Waitall ( int count, EMPI_Request *array_of_requests, EMPI_Status *array_of_statuses );
int EMPI_Waitany ( int count, EMPI_Request array_of_requests[], int *index, EMPI_Status *stat );
int EMPI_Request_free ( EMPI_Request *r );



int EMPI_Type_get_name ( EMPI_Datatype type, char *type_name, int *resultlen );
int EMPI_Type_free ( EMPI_Datatype *type );
int EMPI_Type_commit ( EMPI_Datatype *type );
int EMPI_Type_contiguous ( int count, EMPI_Datatype old_type, EMPI_Datatype *new_type_p );
int EMPI_Type_create_indexed_block ( int count, int blocklength, int array_of_displacements[], EMPI_Datatype oldtype, EMPI_Datatype *newtype );
int EMPI_Type_get_envelope ( EMPI_Datatype type, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner );



int EMPI_Info_create ( EMPI_Info *info );
int EMPI_Info_delete ( EMPI_Info info, char *key );
int EMPI_Info_set ( EMPI_Info info, char *key, char *value );
int EMPI_Info_free ( EMPI_Info *info );



int EMPI_File_open ( EMPI_Comm comm, char *filename, int amode, EMPI_Info info, EMPI_File *fh );
int EMPI_File_close ( EMPI_File *fh );
int EMPI_File_read_all ( EMPI_File fh, void *buf, int count, EMPI_Datatype type, EMPI_Status *stat );
int EMPI_File_read_at ( EMPI_File fh, EMPI_Offset offset, void *buf, int count, EMPI_Datatype type, EMPI_Status *stat );
int EMPI_File_write_at ( EMPI_File fh, EMPI_Offset offset, void *buf, int count, EMPI_Datatype type, EMPI_Status *stat );
int EMPI_File_set_view ( EMPI_File fh, EMPI_Offset disp, EMPI_Datatype etype, EMPI_Datatype filetype, char *datarep, EMPI_Info info );
int EMPI_File_write_all ( EMPI_File fh, void *buf, int count, EMPI_Datatype type, EMPI_Status *stat );



int EMPI_Intercomm_create ( EMPI_Comm local_comm, int local_leader, EMPI_Comm peer_comm, int remote_leader, int tag, EMPI_Comm *newintercomm );
int EMPI_Intercomm_merge ( EMPI_Comm intercomm, int high, EMPI_Comm *newintracomm );
# 5 "reduce_ops.h" 2





void MAGPIE_MAX(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_MIN(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_SUM(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_PROD(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_LAND(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_LOR(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_LXOR(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_BAND(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_BOR(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_BXOR(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_MAXLOC(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
void MAGPIE_MINLOC(void *invec, void *inoutvec, int *len, EMPI_Datatype *type);
# 3 "reduce_ops.c" 2
# 1 "../../include/settings.h" 1
# 4 "reduce_ops.c" 2
# 18 "reduce_ops.c"
typedef struct {
  float re;
  float im;
} empi_complex_type;


typedef struct {
  double re;
  double im;
} empi_doublecomplex_type;


typedef struct {
  int value;
  int loc;
} empi_2int_type;


typedef struct {
  float value;
  float loc;
} empi_2real_type;


typedef struct {
  double value;
  double loc;
} empi_2doubleprecision_type;


typedef struct {
  short value;
  int loc;
} empi_shortint_type;


typedef struct {
  long value;
  int loc;
} empi_longint_type;


typedef struct {
  float value;
  int loc;
} empi_floatint_type;


typedef struct {
  double value;
  int loc;
} empi_doubleint_type;


typedef struct {
  double value;
  int loc;
} empi_longdoubleint_type;



int EMPI_Op_errno;

extern int FORTRAN_FALSE;
extern int FORTRAN_TRUE;
# 163 "reduce_ops.c"
static void EMPI_MAX_CHAR(char *invec, char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_CHAR(char *invec, char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_CHAR(char *invec, char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_CHAR(char *invec, char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_CHAR(char *invec, char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_CHAR(char *invec, char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_CHAR(char *invec, char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_SHORT(short *invec, short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_SHORT(short *invec, short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_SHORT(short *invec, short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_SHORT(short *invec, short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_SHORT(short *invec, short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_SHORT(short *invec, short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_SHORT(short *invec, short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_INT(int *invec, int *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_INT(int *invec, int *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_INT(int *invec, int *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_INT(int *invec, int *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_INT(int *invec, int *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_INT(int *invec, int *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_INT(int *invec, int *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_LONG(long *invec, long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_LONG(long *invec, long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_LONG(long *invec, long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_LONG(long *invec, long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_LONG(long *invec, long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_LONG(long *invec, long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_LONG(long *invec, long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_LONG_LONG(long long *invec, long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_LONG_LONG(long long *invec, long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_LONG_LONG(long long *invec, long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_LONG_LONG(long long *invec, long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_LONG_LONG(long long *invec, long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_LONG_LONG(long long *invec, long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_LONG_LONG(long long *invec, long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_SIGNED_CHAR(signed char *invec, signed char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_SIGNED_CHAR(signed char *invec, signed char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_SIGNED_CHAR(signed char *invec, signed char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_SIGNED_CHAR(signed char *invec, signed char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_SIGNED_CHAR(signed char *invec, signed char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_SIGNED_CHAR(signed char *invec, signed char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_SIGNED_CHAR(signed char *invec, signed char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_UNSIGNED_CHAR(unsigned char *invec, unsigned char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_UNSIGNED_CHAR(unsigned char *invec, unsigned char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_UNSIGNED_CHAR(unsigned char *invec, unsigned char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_UNSIGNED_CHAR(unsigned char *invec, unsigned char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_UNSIGNED_CHAR(unsigned char *invec, unsigned char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_UNSIGNED_CHAR(unsigned char *invec, unsigned char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_UNSIGNED_CHAR(unsigned char *invec, unsigned char *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_UNSIGNED_SHORT(unsigned short *invec, unsigned short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_UNSIGNED_SHORT(unsigned short *invec, unsigned short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_UNSIGNED_SHORT(unsigned short *invec, unsigned short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_UNSIGNED_SHORT(unsigned short *invec, unsigned short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_UNSIGNED_SHORT(unsigned short *invec, unsigned short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_UNSIGNED_SHORT(unsigned short *invec, unsigned short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_UNSIGNED_SHORT(unsigned short *invec, unsigned short *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_UNSIGNED(unsigned *invec, unsigned *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_UNSIGNED(unsigned *invec, unsigned *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_UNSIGNED(unsigned *invec, unsigned *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_UNSIGNED(unsigned *invec, unsigned *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_UNSIGNED(unsigned *invec, unsigned *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_UNSIGNED(unsigned *invec, unsigned *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_UNSIGNED(unsigned *invec, unsigned *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_UNSIGNED_LONG(unsigned long *invec, unsigned long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_UNSIGNED_LONG(unsigned long *invec, unsigned long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_UNSIGNED_LONG(unsigned long *invec, unsigned long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_UNSIGNED_LONG(unsigned long *invec, unsigned long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_UNSIGNED_LONG(unsigned long *invec, unsigned long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_UNSIGNED_LONG(unsigned long *invec, unsigned long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_UNSIGNED_LONG(unsigned long *invec, unsigned long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_UNSIGNED_LONG_LONG(unsigned long long *invec, unsigned long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_UNSIGNED_LONG_LONG(unsigned long long *invec, unsigned long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_UNSIGNED_LONG_LONG(unsigned long long *invec, unsigned long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_UNSIGNED_LONG_LONG(unsigned long long *invec, unsigned long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}
static void EMPI_BAND_UNSIGNED_LONG_LONG(unsigned long long *invec, unsigned long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) & (inoutvec[i])); }}
static void EMPI_BOR_UNSIGNED_LONG_LONG(unsigned long long *invec, unsigned long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) | (inoutvec[i])); }}
static void EMPI_BXOR_UNSIGNED_LONG_LONG(unsigned long long *invec, unsigned long long *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) ^ (inoutvec[i])); }}

static void EMPI_MAX_FLOAT(float *invec, float *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_FLOAT(float *invec, float *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_FLOAT(float *invec, float *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_FLOAT(float *invec, float *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}

static void EMPI_MAX_DOUBLE(double *invec, double *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_DOUBLE(double *invec, double *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_DOUBLE(double *invec, double *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_DOUBLE(double *invec, double *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}

static void EMPI_MAX_LONG_DOUBLE(long double *invec, long double *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] > inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_MIN_LONG_DOUBLE(long double *invec, long double *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i] < inoutvec[i]) ? invec[i] : inoutvec[i]); }}
static void EMPI_SUM_LONG_DOUBLE(long double *invec, long double *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) + (inoutvec[i])); }}
static void EMPI_PROD_LONG_DOUBLE(long double *invec, long double *inoutvec, int len) { int i; for (i=0; i < len; i++) { inoutvec[i] = ((invec[i]) * (inoutvec[i])); }}

static void EMPI_SUM_COMPLEX(empi_complex_type *b, empi_complex_type *a, int len) { int i; for ( i=0; i < *len; i++ ) { a[i].re = ((a[i].re) + (b[i].re)); a[i].im = ((a[i].im) + (b[i].im)); }}
static void EMPI_SUM_DOUBLE_COMPLEX(empi_doublecomplex_type *b, empi_doublecomplex_type *a, int len) { int i; for ( i=0; i < *len; i++ ) { a[i].re = ((a[i].re) + (b[i].re)); a[i].im = ((a[i].im) + (b[i].im)); }}

static void EMPI_PROD_COMPLEX(empi_complex_type *b, empi_complex_type *a, int len) { int i; empi_complex_type c; for ( i=0; i < *len; i++ ){ c.re = a[i].re; c.im = a[i].im; a[i].re = c.re*b[i].re - c.im*b[i].im; a[i].im = c.im*b[i].re + c.re*b[i].im; }}
static void EMPI_PROD_DOUBLE_COMPLEX(empi_doublecomplex_type *b, empi_doublecomplex_type *a, int len) { int i; empi_doublecomplex_type c; for ( i=0; i < *len; i++ ){ c.re = a[i].re; c.im = a[i].im; a[i].re = c.re*b[i].re - c.im*b[i].im; a[i].im = c.im*b[i].re + c.re*b[i].im; }}

static void EMPI_MAXLOC_2REAL(empi_2real_type *invec, empi_2real_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value < invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MAXLOC_2DOUBLE_PRECISION(empi_2doubleprecision_type *invec, empi_2doubleprecision_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value < invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MAXLOC_2INT(empi_2int_type *invec, empi_2int_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value < invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MAXLOC_FLOAT_INT(empi_floatint_type *invec, empi_floatint_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value < invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MAXLOC_DOUBLE_INT(empi_doubleint_type *invec, empi_doubleint_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value < invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MAXLOC_SHORT_INT(empi_shortint_type *invec, empi_shortint_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value < invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MAXLOC_LONG_INT(empi_longint_typ *invec, empi_longint_typ *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value < invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MAXLOC_LONG_DOUBLE_INT(empi_longdoubleint_type *invec, empi_longdoubleint_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value < invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}

static void EMPI_MINLOC_2REAL(empi_2real_type *invec, empi_2real_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value > invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MINLOC_2DOUBLE_PRECISION(empi_2doubleprecision_type *invec, empi_2doubleprecision_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value > invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MINLOC_2INT(empi_2int_type *invec, empi_2int_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value > invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MINLOC_FLOAT_INT(empi_floatint_type *invec, empi_floatint_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value > invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MINLOC_DOUBLE_INT(empi_doubleint_type *invec, empi_doubleint_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value > invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MINLOC_SHORT_INT(empi_shortint_type *invec, empi_shortint_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value > invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MINLOC_LONG_INT(empi_longint_typ *invec, empi_longint_typ *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value > invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}
static void EMPI_MINLOC_LONG_DOUBLE_INT(empi_longdoubleint_type *invec, empi_longdoubleint_type *inoutvec, int len) { int i; for (i=0; i < len; i++){ if ( inoutvec[i].value == invec[i].value ) { inoutvec[i].loc = ((inoutvec[i].loc < invec[i].loc) ? inoutvec[i].loc : invec[i].loc); } else if ( inoutvec[i].value > invec[i].value ) { inoutvec[i].value = invec[i].value; inoutvec[i].loc = invec[i].loc; } }}

void EMPI_REDUCE_MAX(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (1):
      EMPI_MAX_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_MAX_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (24):
      EMPI_MAX_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_MAX_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_MAX_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_MAX_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
      EMPI_MAX_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_MAX_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_MAX_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_MAX_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   case (12):
   case (25):
      EMPI_MAX_FLOAT((float *)invec, (float *)inoutvec, *len);
      break;
   case (13):
   case (26):
      EMPI_MAX_DOUBLE((double *)invec, (double *)inoutvec, *len);
      break;
   case (14):
      EMPI_MAX_LONG_DOUBLE((long double *)invec, (long double *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 339, "REDUCTION OPERATION FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}


void EMPI_REDUCE_MIN(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (1):
      EMPI_MIN_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_MIN_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (24):
      EMPI_MIN_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_MIN_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_MIN_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_MIN_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
      EMPI_MIN_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_MIN_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_MIN_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_MIN_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   case (12):
   case (25):
      EMPI_MIN_FLOAT((float *)invec, (float *)inoutvec, *len);
      break;
   case (13):
   case (26):
      EMPI_MIN_DOUBLE((double *)invec, (double *)inoutvec, *len);
      break;
   case (14):
      EMPI_MIN_LONG_DOUBLE((long double *)invec, (long double *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 394, "REDUCTION OPERATION FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}


void EMPI_REDUCE_SUM(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (1):
      EMPI_SUM_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_SUM_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (24):
      EMPI_SUM_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_SUM_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_SUM_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_SUM_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
      EMPI_SUM_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_SUM_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_SUM_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_SUM_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   case (12):
   case (25):
      EMPI_SUM_FLOAT((float *)invec, (float *)inoutvec, *len);
      break;
   case (13):
   case (26):
      EMPI_SUM_DOUBLE((double *)invec, (double *)inoutvec, *len);
      break;
   case (14):
      EMPI_SUM_LONG_DOUBLE((long double *)invec, (long double *)inoutvec, *len);
      break;
   case (27):
      EMPI_SUM_COMPLEX((empi_complex_type *)invec, (empi_complex_type *)inoutvec, *len);;
      break;
   case (30):
      EMPI_SUM_DOUBLE_COMPLEX((empi_doublecomplex_type *)invec, (empi_doublecomplex_type *)inoutvec, *len);;
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 455, "REDUCTION OPERATION PROD FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}


void EMPI_REDUCE_PROD(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (1):
      EMPI_PROD_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_PROD_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (24):
      EMPI_PROD_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_PROD_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_PROD_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_PROD_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
      EMPI_PROD_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_PROD_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_PROD_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_PROD_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   case (12):
   case (25):
      EMPI_PROD_FLOAT((float *)invec, (float *)inoutvec, *len);
      break;
   case (13):
   case (26):
      EMPI_PROD_DOUBLE((double *)invec, (double *)inoutvec, *len);
      break;
   case (14):
      EMPI_PROD_LONG_DOUBLE((long double *)invec, (long double *)inoutvec, *len);
      break;
   case (27):
      EMPI_PROD_COMPLEX((empi_complex_type *)invec, (empi_complex_type *)inoutvec, *len);;
      break;
   case (30):
      EMPI_PROD_DOUBLE_COMPLEX((empi_doublecomplex_type *)invec, (empi_doublecomplex_type *)inoutvec, *len);;
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 516, "REDUCTION OPERATION PROD FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}


void EMPI_REDUCE_LAND(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (1):
      EMPI_LAND_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_LAND_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (28):
      EMPI_LAND_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_LAND_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_LAND_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_LAND_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
      EMPI_LAND_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_LAND_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_LAND_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_LAND_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 560, "REDUCTION OPERATION LAND FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}


void EMPI_REDUCE_LOR(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (1):
      EMPI_LOR_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_LOR_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (28):
      EMPI_LOR_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_LOR_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_LOR_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_LOR_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
      EMPI_LOR_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_LOR_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_LOR_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_LOR_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 604, "REDUCTION OPERATION LOR FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}


void EMPI_REDUCE_LXOR(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {
   switch (*type) {
   case (1):
      EMPI_LXOR_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_LXOR_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (28):
      EMPI_LXOR_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_LXOR_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_LXOR_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_LXOR_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
      EMPI_LXOR_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_LXOR_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_LXOR_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_LXOR_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 645, "REDUCTION OPERATION LXOR FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}



void EMPI_REDUCE_BAND(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (1):
      EMPI_BAND_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_BAND_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (24):
      EMPI_BAND_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_BAND_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_BAND_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_BAND_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
   case (16):
      EMPI_BAND_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_BAND_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_BAND_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_BAND_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 691, "REDUCTION OPERATION BAND FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}


void EMPI_REDUCE_BOR(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (1):
      EMPI_BOR_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_BOR_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (24):
      EMPI_BOR_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_BOR_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_BOR_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_BOR_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
   case (16):
      EMPI_BOR_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_BOR_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_BOR_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_BOR_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 736, "REDUCTION OPERATION BOR FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}


void EMPI_REDUCE_BXOR(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (1):
      EMPI_BXOR_CHAR((char *)invec, (char *)inoutvec, *len);
      break;
   case (2):
      EMPI_BXOR_SHORT((short *)invec, (short *)inoutvec, *len);
      break;
   case (3):
   case (24):
      EMPI_BXOR_INT((int *)invec, (int *)inoutvec, *len);
      break;
   case (4):
      EMPI_BXOR_LONG((long *)invec, (long *)inoutvec, *len);
      break;
   case (5):
      EMPI_BXOR_LONG_LONG((long long *)invec, (long long *)inoutvec, *len);
      break;
   case (6):
      EMPI_BXOR_SIGNED_CHAR((signed char *)invec, (signed char *)inoutvec, *len);
      break;
   case (7):
   case (16):
      EMPI_BXOR_UNSIGNED_CHAR((unsigned char *)invec, (unsigned char *)inoutvec, *len);
      break;
   case (8):
   case (15):
      EMPI_BXOR_UNSIGNED_SHORT((unsigned short *)invec, (unsigned short *)inoutvec, *len);
      break;
   case (9):
      EMPI_BXOR_UNSIGNED((unsigned *)invec, (unsigned *)inoutvec, *len);
      break;
   case (10):
      EMPI_BXOR_UNSIGNED_LONG((unsigned long *)invec, (unsigned long *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 781, "REDUCTION OPERATION BXOR FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}




void EMPI_REDUCE_MAXLOC(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (38):
      EMPI_MAXLOC_2REAL((empi_2real_type *)invec, (empi_2real_type *)inoutvec, *len);
      break;
   case (39):
      EMPI_MAXLOC_2DOUBLE((empi_2double_type *)invec, (empi_2double_type *)inoutvec, *len);
      break;
   case (21):
   case (40):
      EMPI_MAXLOC_2INT((empi_2int_type *)invec, (empi_2int_type *)inoutvec, *len);
      break;
   case (18):
      EMPI_MAXLOC_FLOAT_INT((empi_floatint_type *)invec, (empi_floatint_type *)inoutvec, *len);
      break;
   case (19):
      EMPI_MAXLOC_DOUBLE_INT((empi_doubleint_type *)invec, (empi_doubleint_type *)inoutvec, *len);
      break;
   case (20):
      EMPI_MAXLOC_LONG_INT((empi_longint_type *)invec, (empi_longint_type *)inoutvec, *len);
      break;
   case (22):
      EMPI_MAXLOC_SHORT_INT((empi_shortint_type *)invec, (empi_shortint_type *)inoutvec, *len);
      break;
   case (23):
      EMPI_MAXLOC_LONG_DOUBLE_INT((empi_longdoubleint_type *)invec, (empi_longdoubleint_type *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 820, "REDUCTION OPERATION MAXLOC FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}



void EMPI_REDUCE_MINLOC(void *invec, void *inoutvec, int *len, EMPI_Datatype *type) {

   EMPI_Op_errno = 0;

   switch (*type) {
   case (38):
      EMPI_MINLOC_2REAL((empi_2real_type *)invec, (empi_2real_type *)inoutvec, *len);
      break;
   case (39):
      EMPI_MINLOC_2DOUBLE((empi_2double_type *)invec, (empi_2double_type *)inoutvec, *len);
      break;
   case (21):
   case (40):
      EMPI_MINLOC_2INT((empi_2int_type *)invec, (empi_2int_type *)inoutvec, *len);
      break;
   case (18):
      EMPI_MINLOC_FLOAT_INT((empi_floatint_type *)invec, (empi_floatint_type *)inoutvec, *len);
      break;
   case (19):
      EMPI_MINLOC_DOUBLE_INT((empi_doubleint_type *)invec, (empi_doubleint_type *)inoutvec, *len);
      break;
   case (20):
      EMPI_MINLOC_LONG_INT((empi_longint_type *)invec, (empi_longint_type *)inoutvec, *len);
      break;
   case (22):
      EMPI_MINLOC_SHORT_INT((empi_shortint_type *)invec, (empi_shortint_type *)inoutvec, *len);
      break;
   case (23):
      EMPI_MINLOC_LONG_DOUBLE_INT((empi_longdoubleint_type *)invec, (empi_longdoubleint_type *)inoutvec, *len);
      break;
   default:
      (XERROR(0, 1, "FATAL", __FUNCTION__, "reduce_ops.c", 858, "REDUCTION OPERATION MINLOC FAILED TO FIND CORRECT TYPE!\n"));
      EMPI_Op_errno = 10;
   }
}
